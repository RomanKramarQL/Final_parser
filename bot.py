import os

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import re
import requests
from datetime import datetime
from probiv import check_driver
from config import TOKEN, API_URL, GROUP_ID  # –î–æ–±–∞–≤–ª—è–µ–º GROUP_ID –≤ –∏–º–ø–æ—Ä—Ç

bot = telebot.TeleBot(TOKEN)
user_data = {}

VALID_CATEGORIES = {'A', 'A1', 'B', 'B1', 'BE', 'C', 'C1', 'CE', 'C1E',
                    'D', 'D1', 'DE', 'D1E', 'M', 'Tm', 'Tb'}


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if chat_id in user_data:
        user_data[chat_id] = {}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_msg = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã —Å–º–æ–∂–µ—à—å –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫—É –∏–∑ –±–∞–∑—ã –í–£ –¥–ª—è –ø—Ä–æ–±–∏–≤–∞ –Ω–∞ –≥–∏–±–¥–¥ —Ä—Ñ.\n"
        "üîê –°–∞–ø–ø–æ—Ä—Ç - @newqrx\n"
        "üöÄ –ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å"
    )

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üíµ–ö—É–ø–∏—Ç—å –±–∞–∑—É", callback_data="buy_db"))
    markup.add(InlineKeyboardButton("üîé–ü—Ä–æ–±–∏–≤ –ø–æ –±–∞–∑–µ", callback_data="driver_license_check"))

    bot.send_message(chat_id, welcome_msg, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'buy_db')
def buy_db(call):
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id)
    msg = bot.send_message(chat_id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n‚Äî –ù–∞–ø—Ä–∏–º–µ—Ä: 01.02.1993")
    bot.register_next_step_handler(msg, process_bdate)


def process_bdate(message):
    chat_id = message.chat.id
    bdate_input = message.text

    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', bdate_input):
        msg = bot.send_message(chat_id,
                               "‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.02.1993")
        bot.register_next_step_handler(msg, process_bdate)
        return

    try:
        date_obj = datetime.strptime(bdate_input, '%d.%m.%Y')
        bdate = date_obj.strftime('%Y-%m-%d')
    except ValueError:
        msg = bot.send_message(chat_id,
                               "‚ùå–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(msg, process_bdate)
        return

    if chat_id not in user_data:
        user_data[chat_id] = {}
    user_data[chat_id]['bdate'] = bdate

    markup = InlineKeyboardMarkup(row_width=4)
    row1 = [
        InlineKeyboardButton("A", callback_data="cat_A", parse_mode='HTML'),
        InlineKeyboardButton("B", callback_data="cat_B", parse_mode='HTML'),
        InlineKeyboardButton("C", callback_data="cat_C", parse_mode='HTML'),
        InlineKeyboardButton("D", callback_data="cat_D", parse_mode='HTML')
    ]
    row2 = [
        InlineKeyboardButton("BE", callback_data="cat_BE", parse_mode='HTML'),
        InlineKeyboardButton("CE", callback_data="cat_CE", parse_mode='HTML'),
        InlineKeyboardButton("DE", callback_data="cat_DE", parse_mode='HTML')
    ]
    row3 = [
        InlineKeyboardButton("üîé–ü–æ–∏—Å–∫", callback_data="search")
    ]

    markup.add(*row1)
    markup.add(*row2)
    markup.add(*row3)

    bot.send_message(chat_id, "<b>üöî–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∞–≤:</b>", reply_markup=markup, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data.startswith('cat_'))
def handle_category_selection(call):
    chat_id = call.message.chat.id
    category = call.data.split('_')[1]

    if chat_id not in user_data:
        user_data[chat_id] = {}

    if 'categories' not in user_data[chat_id]:
        user_data[chat_id]['categories'] = set()

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category in user_data[chat_id]['categories']:
        user_data[chat_id]['categories'].remove(category)
    else:
        user_data[chat_id]['categories'].add(category)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = InlineKeyboardMarkup(row_width=4)
    row1 = [
        InlineKeyboardButton(
            text=f"A" + (" ‚úîÔ∏è" if "A" in user_data[chat_id]['categories'] else ""),
            callback_data="cat_A",
            parse_mode='HTML'
        ),
        InlineKeyboardButton(
            text=f"B" + (" ‚úîÔ∏è" if "B" in user_data[chat_id]['categories'] else ""),
            callback_data="cat_B",
            parse_mode='HTML'
        ),
        InlineKeyboardButton(
            text=f"C" + (" ‚úîÔ∏è" if "C" in user_data[chat_id]['categories'] else ""),
            callback_data="cat_C",
            parse_mode='HTML'
        ),
        InlineKeyboardButton(
            text=f"D" + (" ‚úîÔ∏è" if "D" in user_data[chat_id]['categories'] else ""),
            callback_data="cat_D",
            parse_mode='HTML'
        )
    ]
    row2 = [
        InlineKeyboardButton(
            text=f"BE" + (" ‚úîÔ∏è" if "BE" in user_data[chat_id]['categories'] else ""),
            callback_data="cat_BE",
            parse_mode='HTML'
        ),
        InlineKeyboardButton(
            text=f"CE" + (" ‚úîÔ∏è" if "CE" in user_data[chat_id]['categories'] else ""),
            callback_data="cat_CE",
            parse_mode='HTML'
        ),
        InlineKeyboardButton(
            text=f"DE" + (" ‚úîÔ∏è" if "DE" in user_data[chat_id]['categories'] else ""),
            callback_data="cat_DE",
            parse_mode='HTML'
        )
    ]
    row3 = [
        InlineKeyboardButton("üîé–ü–æ–∏—Å–∫", callback_data="search")
    ]

    markup.add(*row1)
    markup.add(*row2)
    markup.add(*row3)

    selected = ", ".join(sorted(user_data[chat_id]['categories'])) if user_data[chat_id]['categories'] else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"

    try:
        bot.edit_message_text(
            text=f"<b>üöî–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∞–≤:</b>\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {selected}",
            chat_id=chat_id,
            message_id=call.message.message_id,
            reply_markup=markup,
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@bot.callback_query_handler(func=lambda call: call.data == 'search')
def handle_search(call):
    chat_id = call.message.chat.id

    if chat_id not in user_data or 'categories' not in user_data[chat_id] or not user_data[chat_id]['categories']:
        bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
        return

    bot.answer_callback_query(call.id, "–ò—â–µ–º...")
    msg = bot.edit_message_text("–ò—â–µ–º –¥–∞–Ω–Ω—ã–µ...", chat_id, call.message.message_id)

    try:
        response = requests.get(API_URL, timeout=10)

        if response.status_code == 200:
            api_data = response.json().get('data', [])

            if not api_data:
                bot.edit_message_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.", chat_id, msg.message_id)
                return

            user_data[chat_id]['api_data'] = api_data
            matching_bdate = [record for record in api_data if record.get('bdate') == user_data[chat_id]['bdate']]

            if not matching_bdate:
                bot.edit_message_text(
                    f"–ü–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è {user_data[chat_id]['bdate']} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    chat_id, msg.message_id
                )
                return

            matching_records = []
            available_categories = set()

            for record in matching_bdate:
                record_cats = set(record.get('cat', '').split(','))
                available_categories.update(record_cats)
                if user_data[chat_id]['categories'] & record_cats:
                    matching_records.append(record)

            if matching_records:
                user_data[chat_id]['found_records'] = matching_records
                date_groups = {}
                for record in matching_records:
                    try:
                        issue_date = datetime.strptime(record['date'], '%Y-%m-%d').strftime('%d.%m.%Y')
                        if issue_date not in date_groups:
                            date_groups[issue_date] = set()
                        date_groups[issue_date].update(record['cat'].split(','))
                    except:
                        continue

                markup = InlineKeyboardMarkup()
                for issue_date, cats in sorted(date_groups.items(), reverse=True):
                    btn_text = f"{issue_date} | {', '.join(sorted(cats))}"
                    markup.add(InlineKeyboardButton(btn_text, callback_data=f"date_{issue_date}"))

                bot.edit_message_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–∞–≤–∞:",
                    chat_id, msg.message_id,
                    reply_markup=markup
                )
            else:
                # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                not_found_msg = (
                    "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –í–£ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É:"
                )

                user_data[chat_id]['found_records'] = matching_bdate

                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –¥–∞—Ç–∞–º
                date_cat_groups = {}
                for record in matching_bdate:
                    try:
                        issue_date = datetime.strptime(record['date'], '%Y-%m-%d').strftime('%d.%m.%Y')
                        cats = set(record.get('cat', '').split(','))

                        if issue_date not in date_cat_groups:
                            date_cat_groups[issue_date] = set()
                        date_cat_groups[issue_date].update(cats)
                    except:
                        continue

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                markup = InlineKeyboardMarkup()
                for issue_date, cats in sorted(date_cat_groups.items(), reverse=True):
                    btn_text = f"{issue_date} | {', '.join(sorted(cats))}"
                    markup.add(InlineKeyboardButton(btn_text, callback_data=f"date_{issue_date}"))

                bot.edit_message_text(
                    not_found_msg,
                    chat_id,
                    msg.message_id,
                    reply_markup=markup
                )
        else:
            bot.edit_message_text(
                f"–û—à–∏–±–∫–∞ API: {response.status_code}",
                chat_id, msg.message_id
            )

    except requests.exceptions.RequestException as e:
        bot.edit_message_text(
            f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}",
            chat_id, msg.message_id
        )
    except Exception as e:
        bot.edit_message_text(
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
            chat_id, msg.message_id
        )


@bot.callback_query_handler(func=lambda call: call.data.startswith('date_'))
def handle_date_selection(call):
    chat_id = call.message.chat.id
    selected_date = call.data.split('_')[1]  # –í —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì

    if chat_id not in user_data or 'found_records' not in user_data[chat_id]:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    try:
        date_compare = datetime.strptime(selected_date, '%d.%m.%Y').strftime('%Y-%m-%d')
    except:
        date_compare = selected_date

    records = []
    for r in user_data[chat_id]['found_records']:
        try:
            if r['date'] == date_compare or r['date'] == selected_date:
                records.append(r)
        except:
            continue

    if not records:
        bot.send_message(chat_id, f"–ü–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ {selected_date} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for record in records:
        try:
            srok_date = datetime.strptime(record['srok'], '%Y-%m-%d').strftime('%d.%m.%Y')
        except:
            srok_date = record['srok']

        try:
            issue_date = datetime.strptime(record['date'], '%Y-%m-%d').strftime('%d.%m.%Y')
        except:
            issue_date = record['date']

        message = (
            f"–ù–æ–º–µ—Ä –ø—Ä–∞–≤: {record['num']}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {record['bdate']}\n"
            f"–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {issue_date}\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {srok_date}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {record['cat']}\n\n"
            "–õ—É—á—à–∏–µ —Å—Ç—Ä–æ–∫–∏ - @qrx_draw_bot"
        )

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üìã–ö—É–ø–∏—Ç—å –µ—â—ë", callback_data="buy_more"))

        bot.send_message(chat_id, message, reply_markup=markup)

        try:
            user_info = bot.get_chat(chat_id)
            username = f"@{user_info.username}" if user_info.username else "–±–µ–∑ username"
            first_name = user_info.first_name or ""
            last_name = user_info.last_name or ""
            full_name = f"{first_name} {last_name}".strip()

            group_message = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} {full_name}\n"
                f"–∫—É–ø–∏–ª —Å—Ç—Ä–æ–∫—É –í–£:\n\n"
                f"–ù–æ–º–µ—Ä –ø—Ä–∞–≤: {record['num']}\n"
                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {record['bdate']}\n"
                f"–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {issue_date}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {record['cat']}"
            )

            bot.send_message(GROUP_ID, group_message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")

    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == 'buy_more')
def handle_buy_more(call):
    chat_id = call.message.chat.id
    if chat_id in user_data:
        user_data[chat_id] = {}
    bot.answer_callback_query(call.id)
    msg = bot.send_message(chat_id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n‚Äî –ù–∞–ø—Ä–∏–º–µ—Ä: 01.02.1993")
    bot.register_next_step_handler(msg, process_bdate)


@bot.callback_query_handler(func=lambda call: call.data == 'driver_license_check')
def driver_license_check(call):
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id)
    msg = bot.send_message(chat_id, "üî¢ –í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_driver_number)


def process_driver_number(message):
    chat_id = message.chat.id
    driver_number = message.text.strip()

    if chat_id not in user_data:
        user_data[chat_id] = {}
    user_data[chat_id]['driver_number'] = driver_number

    msg = bot.send_message(chat_id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.02.1993):")
    bot.register_next_step_handler(msg, process_driver_bdate)


def process_driver_bdate(message):
    chat_id = message.chat.id
    bdate_input = message.text

    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', bdate_input):
        msg = bot.send_message(chat_id,
                               "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.02.1993)")
        bot.register_next_step_handler(msg, process_driver_bdate)
        return

    try:
        date_obj = datetime.strptime(bdate_input, '%d.%m.%Y')
        bdate = date_obj.strftime('%Y-%m-%d')
    except ValueError:
        msg = bot.send_message(chat_id,
                               "‚ùå –¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(msg, process_driver_bdate)
        return

    if chat_id not in user_data or 'driver_number' not in user_data[chat_id]:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    driver_number = user_data[chat_id]['driver_number']

    processing_msg = bot.send_message(chat_id, "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

    try:
        result = check_driver(driver_number, bdate)

        if result and 'image_path' in result:
            with open(result['image_path'], 'rb') as photo:
                bot.send_photo(chat_id, photo)

            try:
                os.remove(result['image_path'])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

        elif 'error' in result:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º.")

    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")
    try:
        bot.delete_message(chat_id, processing_msg.message_id)
    except:
        pass
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()