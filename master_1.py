from itertools import cycle
from config import start_drivers_number_1, TOKEN, GROUP_ID
from database import insert_driver_data, is_driver_exists, delete_driver_by_number
from inference import CaptchaRecognizer
import requests
import base64
import time


def init_proxy_rotator(file_path='proxy_info.txt'):
    with open(file_path, 'r') as f:
        proxies_list = [line.strip() for line in f if line.strip()]
    return cycle(proxies_list)

USER_AGENTS = [
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/118.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
]

user_agent_rotator = cycle(USER_AGENTS)


recognizer = CaptchaRecognizer()
proxy_rotator = init_proxy_rotator()

headers = {
    "Accept": "*/*",
    "Accept-Encoding": "gzip, deflate, br, zstd",
    "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
    'Connection': 'keep-alive',
    "Proxy-Connection": "keep-alive",
    "Host": "xn--b1afk4ade.xn--90adear.xn--p1ai",
    'Origin': 'https://xn--80aebkobnwfcnsfk1e0h.xn--p1ai',
    "Referer": "https://xn--80aebkobnwfcnsfk1e0h.xn--p1ai/",
    "Sec-Ch-ua": '"Chromium";v="136", "Google Chrome";v="136", "Not.A/Brand";v="99"',
    "Sec-Ch-ua-mobile": "?0",
    "Sec-Ch-ua-platform": '"Linux"',
    "Sec-Fetch-dest": "empty",
    "Sec-Fetch-mode": "cors",
    "Sec-Fetch-site": "cross-site",
    "Sec-Fetch-storage-access": "active",
    "User-Agent": ""
}

def send_telegram_notification(message):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {
        'chat_id': GROUP_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    try:
        response = requests.post(url, json=payload,)
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        return False


proxies = {
    'http': None,
    'https': None
}

def rotate_proxy():
    global proxies
    next_proxy = next(proxy_rotator)
    proxies = {
        'http': next_proxy,
        'https': next_proxy
    }
    headers["User-Agent"] = next(user_agent_rotator)
    return proxies

def generate_driver_numbers():
    current = start_drivers_number_1
    while True:
        current += 1
        if current > 9999999999:
            current = 9900000001
        yield str(current)


def get_captcha(proxy=None):
    for _ in range(3):
        try:
            response = requests.get(
                url='https://xn--b1afk4ade.xn--90adear.xn--p1ai/captcha',
                headers=headers,
                timeout=30,
                proxies=proxy
            )
            return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ø—á–∏: {e}")
            time.sleep(5)
    return None


def recognize_captcha(base64_string):
    filename = "temp_captcha.jpg"
    try:
        with open(filename, "wb") as file:
            file.write(base64.b64decode(base64_string))
        return recognizer.recognize_captcha(filename, show_image=False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–∞–ø—á–∏: {e}")
        return None


def check_driver(driver_number):
    max_retries = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    retries = 0
    while retries < max_retries:
        current_proxy = rotate_proxy()
        time.sleep(5)
        try:
            captcha_data = get_captcha(current_proxy)
            if not captcha_data:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–ø—á—É")
                return False

            captcha_word = recognize_captcha(captcha_data["base64jpg"])
            if not captcha_word:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–ø—á—É")
                retries += 1
                continue

            data = {
                'num': driver_number,
                'date': "",
                'captchaWord': captcha_word,
                'captchaToken': captcha_data["token"]
            }
            response = requests.post(
                url="https://xn--b1afk4ade.xn--90adear.xn--p1ai/proxy/check/driver",
                headers=headers,
                data=data,
                timeout=(10,30),
                proxies=current_proxy
            )
            response_json = response.json()

            if response_json.get('code') == 201:
                print(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {driver_number}, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
                retries += 1
                time.sleep(1)
                continue

            if response_json['message'] == '–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω. –ó–∞–ø–∏—Å–µ–π –æ –≤—ã–¥–∞—á–µ –í–£ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ':
                print(f"–ó–∞–ø–∏—Å–µ–π –æ –≤—ã–¥–∞—á–µ –í–£ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {driver_number}")
                retries += 5
                time.sleep(1)
                continue
            if response_json['doc']["nameop"] == '–ó–∞–º–µ–Ω–∞ –í–£ –≤ —Å–≤—è–∑–∏ —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º —Å—Ä–æ–∫–∞ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è' and \
                    response_json['doc']["codeop"] == '38':
                print(f"–ë—ã–ª–æ –ª–∏—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∞ –Ω–∞ –í–£ {driver_number}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –∏ —É–¥–∞–ª—è–µ–º –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞
                if is_driver_exists({'num': driver_number}):
                    print(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ë–î –¥–ª—è –Ω–æ–º–µ—Ä–∞ {driver_number}, —É–¥–∞–ª—è–µ–º...")
                    if delete_driver_by_number(driver_number):
                        print(f"–ó–∞–ø–∏—Å—å —Å –Ω–æ–º–µ—Ä–æ–º {driver_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
                        message = (
                            "üóë <b>–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã!</b>\n\n"
                            f"üìÑ <b>–ù–æ–º–µ—Ä –ø—Ä–∞–≤:</b> {driver_number}\n"
                            f"‚ÑπÔ∏è <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –õ–∏—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¢–°\n"
                            f"üîç <b>–û–ø–µ—Ä–∞—Ü–∏—è:</b> {response_json['doc']['nameop']}\n"
                            f"üî¢ <b>–ö–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b> {response_json['doc']['codeop']}"
                        )
                        if send_telegram_notification(message):
                            print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                        else:
                            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≤ Telegram")
                    else:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —Å –Ω–æ–º–µ—Ä–æ–º {driver_number} –∏–∑ –ë–î")
                retries += 5
                time.sleep(1)
                continue

            if 'doc' in response_json and 'date' in response_json['doc']:
                year = int(response_json['doc']['date'][0:4])
                print(f"–ù–æ–º–µ—Ä: {driver_number}, –≥–æ–¥ –≤—ã–¥–∞—á–∏: {year}")
                if year >= 2023:
                    print(f"–ù–ê–ô–î–ï–ù –ü–û–î–•–û–î–Ø–©–ò–ô –ù–û–ú–ï–†: {driver_number}, –≥–æ–¥: {year}")
                    new_record = {
                        'num': response_json['doc']['num'],
                        'bdate': response_json['doc']['bdate'],
                        'date': response_json['doc']['date'],
                        'srok': response_json['doc']['srok'],
                        'cat': response_json['doc']['cat']
                    }
                    if not is_driver_exists(new_record):
                        record_id = insert_driver_data(new_record)
                        if record_id:
                            print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ —Å ID: {record_id}")

                            message = (
                                "üöÄ <b>–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä!</b>\n\n"
                                f"üìÑ <b>–ù–æ–º–µ—Ä –ø—Ä–∞–≤:</b> {new_record['num']}\n"
                                f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {new_record['bdate']}\n"
                                f"üìÖ <b>–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:</b> {new_record['date']}\n"
                                f"‚è≥ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> {new_record['srok']}\n"
                                f"üìå <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {new_record['cat']}\n\n"
                                f"üÜî <b>ID –≤ –±–∞–∑–µ:</b> {record_id}"
                            )
                            if send_telegram_notification(message):
                                print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                            else:
                                print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram")

                        else:
                            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É")
                        return True
                    else:
                        print("–î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                        return False
                return False

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ {driver_number}: {e}\n current_proxy: {current_proxy}")
            time.sleep(5)
            retries += 1

    return False


def main():
    number_generator = generate_driver_numbers()

    while True:
        try:
            driver_number = next(number_generator)
            print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä: {driver_number}")
            if check_driver(driver_number):
                pass
        except KeyboardInterrupt:
            print("–†–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(10)


if __name__ == "__main__":
    main()